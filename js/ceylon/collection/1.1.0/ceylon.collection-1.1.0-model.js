(function(define) { define(function(require, ex$, module) {
ex$.$CCMM$={"$mod-deps":["ceylon.language\/1.1.0"],"$mod-name":"ceylon.collection","$mod-version":"1.1.0","$mod-bin":"7.0","ceylon.collection":{Stack:{pa:1,mt:"i",an:{see:["LinkedList","ArrayList","Queue"],doc:["Abstract supertype of datastructures that can be \nused as LIFO stacks.\n\nA `Stack` has a well-defined [[top]]. Elements \nmay be added to the top of the stack by [[push]], \nand removed from the top of the stack by [[pop]].\n\nNote that many `Stack`s are also [[List]]s, but \nthere is no defined relationship between the \norder of elements in the list and the direction \nof the stack. In particular, the top of the stack\nmay be first element of the list, or it may be\nthe last element of the list."]},tp:[{nm:"Element"}],$m:{pop:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"m",an:{doc:["Remove and return the element at the top of \nthe stack."]},nm:"pop"},push:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Push a new element onto the top of the stack."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"push"}},$at:{top:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"a",an:{doc:["The element currently at the top of the stack, \nor `null` if the stack is empty."]},nm:"top"}},nm:"Stack"},UnmodifiableMap:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",an:{doc:["A wrapper class that exposes any [[Map]] as unmodifiable, \nhiding the underlying `Map` implementation from clients, \nand preventing attempts to narrow to [[MutableMap]]."],by:["Gavin King"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"}],tp:[{dv:"out",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{dv:"out",nm:"Item"}],$m:{clone:{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"defines"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"}},$at:{map$7h6pyp:{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},mt:"a",nm:"map"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},items:{$t:{md:"$",tp:[{mt:"tp",nm:"Item"}],pk:"$",nm:"Collection"},pa:3,mt:"a",nm:"items"},keys:{$t:{md:"$",tp:[{mt:"tp",nm:"Key"}],pk:"$",nm:"Collection"},pa:3,mt:"g",nm:"keys"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},ps:[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},mt:"prm",nm:"map"}],nm:"UnmodifiableMap"},naturalOrderTreeMap:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"},pa:1,mt:"m",an:{doc:["Create a [[TreeMap] with [[comparable|Comparable]]] keys,\nsorted by the natural ordering of the keys."]},tp:[{sts:[{md:"$",tp:[{mt:"tp",nm:"Key"}],pk:"$",nm:"Comparable"}],nm:"Key"},{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Item"}],ps:[[{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"entries"}]],nm:"naturalOrderTreeMap"},MutableSet:{pa:1,mt:"i",an:{see:["HashSet"],doc:["A [[Set]] supporting addition of new elements and removal \nof existing elements."],by:["Stéphane Épardaud"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"SetMutator"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableSet"},pa:7,mt:"m",nm:"clone"}},nm:"MutableSet"},StoreIterator:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"}],tp:[{nm:"Element"}],$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},$at:{bucket$xzowap:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},pa:1027,mt:"a",nm:"bucket"},store$ds37oi:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"a",nm:"store"},index$e2or89:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"index"}},ps:[{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"}],nm:"StoreIterator"},SingletonMap:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{see:["SingletonSet","Singleton"],doc:["A [[Map]] with exactly one [[entry]]."]},sts:[{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],$m:{clone:{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"defines"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"entry"}]],nm:"contains"}},$at:{hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},entry:{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},pa:1,mt:"a",nm:"entry"}},ps:[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},pa:1,mt:"prm",nm:"entry"}],nm:"SingletonMap"},LinkedCellIterator:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"}],tp:[{nm:"Element"}],$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},$at:{iter$rxmm2v:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"LinkedCell"}]},pa:1024,mt:"a",nm:"iter"}},ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"LinkedCell"}]},pa:1024,mt:"prm",$hdn:1,nm:"iter"}],nm:"LinkedCellIterator"},IdentityMap:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["An identity map implemented as a hash map stored in an \n[[Array]] of singly linked lists of [[Entry]]s. The hash \ncode of a key is defined by [[identityHash]]. Note that an \n`IdentitySet` is not a [[Map]], since it does not obey the \nsemantics of a `Map`. In particular, it may contain \nmultiple keys which are equal, as determined by the `==` \noperator."],by:["Gavin King"]},sts:[{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Collection"},{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Correspondence"}],tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Key"},{nm:"Item"}],$m:{clone:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"IdentityMap"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:1,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],nm:"put"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"m",$m:{selecting$jkdfqs:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",$pt:"f",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"count"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:1,mt:"m",an:{doc:["Removes a key\/value mapping if it exists"]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"remove"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},checkRehash$c66hwt:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",nm:"checkRehash"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"},addToStore$z02azt:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"},{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},mt:"prm",nm:"entry"}]],nm:"addToStore"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"},{$t:{nm:"Item"},mt:"prm",nm:"newItem"}]],nm:"replaceEntry"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",an:{doc:["Removes every key\/value mapping"]},nm:"clear"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"defines"},storeIndex$9uf6gl:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Identifiable"},mt:"prm",nm:"key"},{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"}]],nm:"storeIndex"},putAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",an:{doc:["Adds a collection of key\/value mappings to this map, \nmay be used to change existing mappings"]},ps:[[{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"entries"}]],nm:"putAll"},removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"}]],nm:"removeEntry"},removeAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",an:{doc:["Remove the entries associated with the given keys, \nif any, from this map"]},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"keys"}]],nm:"removeAll"}},$at:{hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},entries$yyuq4k:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial entries in the map."]},nm:"entries"},length$bsbrj6:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},hashtable$ysu1qs:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},store$dzug7v:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},pa:1027,mt:"a",nm:"store"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},ps:[{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},$hdn:1,nm:"hashtable"},{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map."]},$hdn:1,nm:"entries"}],nm:"IdentityMap"},"$pkg-shared":1,partition:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequential"},{comp:"u",l:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequential"},{pk:".",nm:"Nothing"}]}]},{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequential"},{md:"$",mt:"tp",tp:[{comp:"u",mt:"tp",l:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequential"},{pk:".",nm:"Nothing"}]},{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequential"},{md:"$",mt:"tp",pk:"$",nm:"Empty"}],pk:"$",nm:"Tuple"}],pk:"$",nm:"Tuple"},pa:1,mt:"m",an:{doc:["Groups the given [[elements]] into two sequences, the first \ncontaining elements selected by the given [[predicate \nfunction|selecting]], and the second containing elements \nrejected by the given predicate function."]},tp:[{nm:"Element"}],$m:{selecting$1pd776:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:{doc:["A predicate function that determines if a specified \nelement should be selected or rejected. Returns `true`\nto indicate that the element is selected, or `false`\nto indicate that the element is rejected."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",an:{doc:["A predicate function that determines if a specified \nelement should be selected or rejected. Returns `true`\nto indicate that the element is selected, or `false`\nto indicate that the element is rejected."]},$hdn:1,$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"partition"},IdentitySet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["An identity set implemented as a hash set stored in an \n[[Array]] of singly linked lists. The hash code of an \nelement is defined by [[identityHash]]. Note that an \n`IdentitySet` is not a [[Set]], since it does not obey the \nsemantics of a `Set`. In particular, it may contain \nmultiple elements which are equal, as determined by the\n`==` operator."],by:["Gavin King"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Collection"}],tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Element"}],$m:{intersection:{$t:{tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"IdentitySet"},pa:1,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],ps:[[{$t:{tp:[{mt:"tp",nm:"Other"}],pk:".",nm:"IdentitySet"},mt:"prm",nm:"set"}]],nm:"intersection"},clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"IdentitySet"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},addAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"addAll"},superset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],ps:[[{$t:{tp:[{mt:"tp",nm:"Other"}],pk:".",nm:"IdentitySet"},mt:"prm",nm:"set"}]],nm:"superset"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"remove"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"m",$m:{selecting$1muhqi:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"count"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"},add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},complement:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"IdentitySet"},pa:1,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],ps:[[{$t:{tp:[{mt:"tp",nm:"Other"}],pk:".",nm:"IdentitySet"},mt:"prm",nm:"set"}]],nm:"complement"},subset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],ps:[[{$t:{tp:[{mt:"tp",nm:"Other"}],pk:".",nm:"IdentitySet"},mt:"prm",nm:"set"}]],nm:"subset"},storeIndex$6q98a3:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Identifiable"},mt:"prm",nm:"elem"},{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"}]],nm:"storeIndex"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",an:{doc:["Removes every element"]},nm:"clear"},exclusiveUnion:{$t:{tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"IdentitySet"},pa:1,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],ps:[[{$t:{tp:[{mt:"tp",nm:"Other"}],pk:".",nm:"IdentitySet"},mt:"prm",nm:"set"}]],nm:"exclusiveUnion"},union:{$t:{tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"IdentitySet"},pa:1,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Identifiable"}],nm:"Other"}],ps:[[{$t:{tp:[{mt:"tp",nm:"Other"}],pk:".",nm:"IdentitySet"},mt:"prm",nm:"set"}]],nm:"union"},checkRehash$920jqb:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",nm:"checkRehash"},addToStore$vvwctb:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"addToStore"},removeAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"removeAll"}},$at:{hashtable$x4421u:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},store$h40eed:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},pa:1027,mt:"a",nm:"store"},elements$7yiv9d:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the set."]},nm:"elements"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},length$8o5tco:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"}},ps:[{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},$hdn:1,nm:"hashtable"},{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set."]},$hdn:1,nm:"elements"}],nm:"IdentitySet"},spanToMeasure:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Integer"},{comp:"u",l:[{md:"$",pk:"$",nm:"Integer"},{comp:"u",l:[{md:"$",pk:"$",nm:"Boolean"},{pk:".",nm:"Nothing"}]}]}]},{md:"$",mt:"tp",pk:"$",nm:"Integer"},{md:"$",mt:"tp",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Integer"},{comp:"u",l:[{md:"$",pk:"$",nm:"Boolean"},{pk:".",nm:"Nothing"}]}]},{md:"$",mt:"tp",pk:"$",nm:"Integer"},{md:"$",mt:"tp",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Boolean"},{pk:".",nm:"Nothing"}]},{md:"$",mt:"tp",pk:"$",nm:"Boolean"},{md:"$",mt:"tp",pk:"$",nm:"Empty"}],pk:"$",nm:"Tuple"}],pk:"$",nm:"Tuple"}],pk:"$",nm:"Tuple"},mt:"m",an:{doc:["Converts the indexes of a span to those of an equivalent \nmeasure which may be reversed (the span might have \n`from > to` to express that the elements of the segment \nshould be reversed). The returned tuple is of this form:\n\n    [start, length, reversed]"]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],nm:"spanToMeasure"},SortedSet:{pa:1,mt:"i",an:{doc:["A [[Set]] that maintains its entries in sorted order."],by:["Gavin King"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},{md:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",nm:"Element"},{mt:"tp",tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"SortedSet"}],pk:"$",nm:"Ranged"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{lowerElements:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:5,mt:"m",an:{doc:["The elements smaller than the given [[value|element]],\nsorted _in descending order_."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"lowerElements"},higherElements:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:5,mt:"m",an:{doc:["The elements larger than the given [[value|element]],\nsorted in ascending order."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"higherElements"}},nm:"SortedSet"},frequencies:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Integer"}],pk:"$",nm:"Map"},pa:1,mt:"m",an:{doc:["Produces a [[Map]] mapping elements to frequencies, where \neach entry maps a distinct member of the given iterable\n[[elements]] to the number of times it occurs among the \ngiven `elements`."]},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"frequencies"},LinkedList:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["A [[MutableList]] implemented as a singly linked list.\nAlso:\n\n- a [[Stack]], where the top of the stack is the _first_\n  element of the list, and\n- a [[Queue]], where the front of the queue is the first\n  element of the list and the back of the queue is the\n  last element of the list."],by:["Stéphane Épardaud"]},sts:[{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableList"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Stack"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Queue"}],tp:[{nm:"Element"}],$m:{count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"m",$m:{selecting$wkzlmt:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"count"},remove:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"remove"},measure:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"measure"},accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"accept"},set:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"set"},deleteSpan:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"deleteSpan"},deleteMeasure:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"deleteMeasure"},pop:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"pop"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"},add:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},addToTail$qbzc49:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"addToTail"},push:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"push"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"clear"},spanTo:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"spanTo"},delete:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"delete"},replaceFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"replaceFirst"},removeFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"removeFirst"},spanFrom:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"}]],nm:"spanFrom"},removeAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"removeAll"},clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableList"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},addAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"addAll"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},prune:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"prune"},removeLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"removeLast"},firstIndexWhere:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"m",$m:{selecting$z13rf9:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:{doc:["The predicate function the indexed elements \nmust satisfy"]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",an:{doc:["The predicate function the indexed elements \nmust satisfy"]},$pt:"f",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"firstIndexWhere"},advanceBy$cg1mjm:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"cells"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},mt:"prm",nm:"start"}]],nm:"advanceBy"},offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"offer"},infill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"infill"},getFromFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"getFromFirst"},replace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"replace"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"defines"},replaceLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"replaceLast"},sequence:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequential"},pa:3,mt:"m",nm:"sequence"},lastIndexWhere:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"m",$m:{selecting$kj73wf:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",an:{doc:["The predicate function the indexed elements \nmust satisfy."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",an:{doc:["The predicate function the indexed elements \nmust satisfy."]},$pt:"f",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"lastIndexWhere"},truncate:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],nm:"truncate"},insert:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"insert"},collect:{$t:{md:"$",tp:[{mt:"tp",nm:"Result"}],pk:"$",nm:"Sequential"},pa:3,mt:"m",tp:[{nm:"Result"}],ps:[[{$t:{nm:"Result"},mt:"prm",an:{doc:["The transformation applied to the elements."]},$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"collecting"}]],nm:"collect"},span:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"span"}},$at:{lastIndex:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"g",nm:"lastIndex"},length$5zg48z:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},elements$59t65o:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the list."]},nm:"elements"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"last"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},tail$9m8bs3:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},pa:1027,mt:"a",nm:"tail"},back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"back"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"front"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"},head$hmoq6r:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},pa:1027,mt:"a",nm:"head"},top:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"top"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},ps:[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the list."]},$hdn:1,nm:"elements"}],nm:"LinkedList"},Queue:{pa:1,mt:"i",an:{see:["LinkedList","ArrayList","Stack"],doc:["Abstract supertype of datastructures that can\nbe used as FIFO queues.\n\nA `Queue` has a well-defined [[front]] and\n[[back]]. Elements may be added to the back\nof the queue by [[offer]], and removed from\nthe front of the queue by [[accept]].\n\nNote that many `Queue`s are also [[List]]s, but \nthere is no defined relationship between the \norder of elements in the list and the direction \nof the queue. In particular, the front of the \nqueue may be first element of the list, or it \nmay be the last element of the list."]},tp:[{nm:"Element"}],$m:{accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"m",an:{doc:["Remove and return the element at the front \nof the queue."]},nm:"accept"},offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Add a new element to the back of the queue."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"offer"}},$at:{back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"a",an:{doc:["The element currently at the back of the \nqueue, or `null` if the queue is empty."]},nm:"back"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:5,mt:"a",an:{doc:["The element currently at the front of the \nqueue, or `null` if the queue is empty."]},nm:"front"}},nm:"Queue"},linked:{super:{pk:".",nm:"Stability"},pa:1,mt:"o",nm:"linked"},MutableMap:{pa:1,mt:"i",an:{see:["HashMap"],doc:["A [[Map]] supporting addition of new entries and removal of\nexisting entries."],by:["Stéphane Épardaud"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"MapMutator"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],$m:{clone:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"MutableMap"},pa:7,mt:"m",nm:"clone"},put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:7,mt:"m",an:{doc:["Add an entry to this map, overwriting any existing \nentry for the given [[key]], and returning the previous \nvalue associated with the given `key`, if any, or \n`null` if no existing entry was overwritten."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],nm:"put"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:7,mt:"m",an:{doc:["Remove the entry associated with the given [[key]], if \nany, from this map, returning the value no longer \nassociated with the given `key`, if any, or `null` if\nthere was no entry associated with the given `key`."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"remove"}},nm:"MutableMap"},Counter:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",$at:{count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1025,mt:"a",nm:"count"}},ps:[{$t:{md:"$",pk:"$",nm:"Integer"},pa:1025,mt:"prm",$hdn:1,nm:"count"}],nm:"Counter"},unmodifiableMap:{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},pa:1,mt:"m",an:{doc:["Wrap the given [[Map]], preventing attempts to narrow the\nreturned `Map` to [[MutableMap]]."]},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Item"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},mt:"prm",nm:"map"}]],nm:"unmodifiableMap"},elementStore:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"m",an:{doc:["Create a backing array for storing linked lists of hash set\nelements"]},tp:[{nm:"Element"}],ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],nm:"elementStore"},largest:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"x"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"y"}]],nm:"largest"},PriorityQueue:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["A [[Queue]] implemented using a backing [[Array]] where\nthe front of the queue is the smallest element according\nto the order relation defined by [[compare]] function.\nNote that this implementation doesn't guarantee the back\/last\nelement to be the largest element of the queue.\n\nThe size of the backing `Array` is called the _capacity_\nof the `PriorityQueue`. The capacity of a new instance is\nspecified by the given [[initialCapacity]]. The capacity is\nincreased when [[size]] exceeds the capacity. The new\ncapacity is the product of the needed capacity and the\ngiven [[growthFactor]]."],by:["Loic Rouchon"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Collection"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Queue"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{clone:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Collection"},pa:3,mt:"m",nm:"clone"},haveKnownSize$7k454f:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"haveKnownSize"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",an:{doc:["An iterator for the elements belonging to this queue.\nElements returned by this iterator are not ordered"]},$o:{it$vzhf3q:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"}],$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},$at:{index$epjk09:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"index"}},nm:"it"}},nm:"iterator"},leftChild$bif9ts:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",an:{doc:["Consider i1 as index in an array whose first element index is 1\nConsider i0 as index in an array whose first element index is 0\ni1 = i0 + 1\nleft child index is defined by left1 = i1 * 2\nleft0 =  i0 * 2 + 1"]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"leftChild"},accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",an:{doc:["Remove and return the smallest element\n([[front]] element) from this queue"]},nm:"accept"},store$iohp2k:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],pk:"$",nm:"Array"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"capacity"}]],nm:"store"},add$lnahnw:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},compare$gs4c5s:{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"m",an:{doc:["A comparator function used to order elements."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],nm:"compare"},bubbleUp$yevw4e:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"bubbleUp"},offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",an:{doc:["Add a new element to the queue."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"offer"},parent$w5yb7:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",an:{doc:["Consider i1 as index in an array whose first element index is 1\nConsider i0 as index in an array whose first element index is 0\ni1 = i0 + 1\nparent index is defined by parent1 = i1 \/ 2\nparent0 =  (i0 + 1) \/ 2 - 1"]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"parent"},bubbleDown$daf9xt:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"bubbleDown"},addInitialElements$lh42w3:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",nm:"addInitialElements"},minChildrenIndex$1y297w:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"minChildrenIndex"},swap$snqivi:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"first"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"second"}]],nm:"swap"},elt$lqn120:{$t:{nm:"Element"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"elt"},rightChild$rhsywd:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",an:{doc:["Consider i1 as index in an array whose first element index is 1\nConsider i0 as index in an array whose first element index is 0\ni1 = i0 + 1\nright child index is defined by right1 = i1 * 2 + 1\nright0 =  i0 * 2 + 2"]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"rightChild"},grow$kgssjy:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"increment"}]],nm:"grow"},compareIndexes$ilkd5i:{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"first"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"second"}]],nm:"compareIndexes"}},$at:{last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",an:{doc:["The element currently at the end of the\nqueue, or `null` if the queue is empty.\nThis is not necessarily the largest element\n(regarding the order relation defined by\n[[compare]]) of the queue."]},nm:"last"},elements$ra338u:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the queue."]},nm:"elements"},growthFactor$k15cw7:{$t:{md:"$",pk:"$",nm:"Float"},mt:"a",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",an:{doc:["The element currently at the end of the\nqueue, or `null` if the queue is empty.\nThis is not necessarily the largest element\n(regarding the order relation defined by\n[[compare]]) of the queue."]},nm:"back"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",an:{doc:["The smallest element (regarding the order\nrelation defined by [[compare]]) of the\nqueue, or `null` if the queue is empty."]},nm:"front"},array$3tqqzg:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],pk:"$",nm:"Array"},pa:1027,mt:"a",nm:"array"},length$qkg55j:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},initialCapacity$gi6pup:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",an:{doc:["The initial size of the backing array."]},nm:"initialCapacity"}},ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"prm",an:{doc:["A comparator function used to order elements."]},$hdn:1,$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],nm:"compare"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The initial size of the backing array."]},$hdn:1,nm:"initialCapacity"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},$hdn:1,nm:"growthFactor"},{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the queue."]},$hdn:1,nm:"elements"}],nm:"PriorityQueue"},measureToSpan:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Integer"},{comp:"u",l:[{md:"$",pk:"$",nm:"Integer"},{pk:".",nm:"Nothing"}]}]},{md:"$",mt:"tp",pk:"$",nm:"Integer"},{md:"$",mt:"tp",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Integer"},{pk:".",nm:"Nothing"}]},{md:"$",mt:"tp",pk:"$",nm:"Integer"},{md:"$",mt:"tp",pk:"$",nm:"Empty"}],pk:"$",nm:"Tuple"}],pk:"$",nm:"Tuple"},mt:"m",an:{doc:["Converts the indexes of a measure to those of an equivalent \nspan."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"measureToSpan"},SingletonSet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{see:["SingletonMap","Singleton"],doc:["A [[Set]] with exactly one [[element]]."]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{complement:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"complement"},intersection:{$t:{md:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"intersection"},clone:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},exclusiveUnion:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"exclusiveUnion"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},union:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"union"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"}},$at:{element:{$t:{nm:"Element"},pa:1,mt:"a",nm:"element"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"}},ps:[{$t:{nm:"Element"},pa:1,mt:"prm",nm:"element"}],nm:"SingletonSet"},Cell:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",an:{doc:["A link in a singly linked list."]},tp:[{nm:"Element"}],$m:{clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"},pa:1,mt:"m",nm:"clone"}},$at:{element:{$t:{nm:"Element"},pa:1025,mt:"a",an:{doc:["The element belonging to this link."]},nm:"element"},rest:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},pa:1025,mt:"a",an:{doc:["The next link in the list."]},nm:"rest"}},ps:[{$t:{nm:"Element"},pa:1025,mt:"prm",an:{doc:["The element belonging to this link."]},$hdn:1,nm:"element"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},pa:1025,mt:"prm",an:{doc:["The next link in the list."]},$hdn:1,nm:"rest"}],nm:"Cell"},CellIterator:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"}],tp:[{nm:"Element"}],$m:{next:{$t:{comp:"u",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},$at:{iter$5t8f0a:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},pa:1024,mt:"a",nm:"iter"}},ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},pa:1024,mt:"prm",$hdn:1,nm:"iter"}],nm:"CellIterator"},SortedMap:{pa:1,mt:"i",an:{doc:["A [[Map]] that maintains its entries in sorted order."],by:["Gavin King"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},{md:"$",tp:[{mt:"tp",nm:"Key"},{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"SortedMap"}],pk:"$",nm:"Ranged"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{dv:"out",nm:"Item"}],$m:{lowerEntries:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:5,mt:"m",an:{doc:["The entries with keys smaller than the given [[key]],\nsorted by key _in descending order_."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"lowerEntries"},higherEntries:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:5,mt:"m",an:{doc:["The entries with keys larger than the given [[key]],\nsorted by key in ascending order"]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"higherEntries"}},nm:"SortedMap"},SetMutator:{pa:1,mt:"i",an:{see:["MutableSet"],doc:["Protocol for mutation of a [[MutableSet]]."]},sts:[{md:"$",tp:[{md:"$",mt:"tp",pk:"$",nm:"Object"}],pk:"$",nm:"Set"}],tp:[{dv:"in",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove every element from this set, leaving an empty\nset with no elements."]},nm:"clear"},addAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,mt:"m",an:{doc:["Add the given [[elements]] to this set, returning `true`\nif any of the given elements was _not_ already a member\nof this set, or `false` otherwise."]},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"addAll"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,mt:"m",an:{doc:["Remove an [[element]] from this set, returning `true`\nif the element was previously a member of the set."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"remove"},add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,mt:"m",an:{doc:["Add the given [[element]] to this set, returning `true`\nif the element was _not_ already a member of this set, \nor `false` otherwise."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},removeAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,mt:"m",an:{doc:["Remove the given [[elements]] from this set, returning \n`true` if at least one element was previously a member \nof the set."]},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"removeAll"}},nm:"SetMutator"},invert:{$t:{md:"$",tp:[{mt:"tp",nm:"Item"},{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"}],pk:"$",nm:"Sequence"}],pk:"$",nm:"Map"},mt:"m",an:{doc:["Invert a [[Map]], producing a map from items to sequences \nof keys. Since various keys in the [[original map|map]] may \nmap to the same item, the resulting map contains a sequence \nof keys for each distinct item."]},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Item"}],$m:{mapping$ii3181:{$t:{md:"$",tp:[{mt:"tp",nm:"Key"}],pk:"$",nm:"Sequence"},mt:"m",ps:[[{$t:{nm:"Item"},mt:"prm",nm:"item"},{$t:{tp:[{mt:"tp",nm:"Key"}],pk:".",nm:"ArrayList"},mt:"prm",nm:"sa"}]],nm:"mapping"}},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Map"},mt:"prm",nm:"map"}]],nm:"invert"},ListMutator:{pa:1,mt:"i",an:{see:["MutableList"],doc:["Protocol for mutation of a [[MutableList]]."]},sts:[{md:"$",tp:[{md:"$",mt:"tp",pk:"$",nm:"Anything"}],pk:"$",nm:"List"}],tp:[{dv:"in",nm:"Element"}],$m:{addAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Add the given [[elements]] to the end of this list,\nincreasing the [[length|List.size]] of the list."]},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"addAll"},remove:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove all occurrences of the given [[value|element]]\nfrom this list.\n\nTo remove just one occurrence of the given value, use\n[[removeFirst]] or [[removeLast]]."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to remove"]},nm:"element"}]],nm:"remove"},removeLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,mt:"m",an:{doc:["Remove the last occurrence of the given\n[[value|element]] from this list, if any, returning\n`true` if the value occurs in the list, or `false`\notherwise."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to remove"]},nm:"element"}]],nm:"removeLast"},prune:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove all null elements from this list, leaving a list\nwith no null elements."]},nm:"prune"},set:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{throws:["AssertionError","if the given index is out of bounds, that\nis, if `index<0` or if `index>lastIndex`"],doc:["Replace the existing element at the specified [[index]]\nwith the given [[element]]."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"set"},deleteSpan:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove every element with an index in the spanned range\n`from..to`."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"deleteSpan"},deleteMeasure:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove every element with an index in the measured\nrange `from:length`."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"deleteMeasure"},deleteFirst:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove the element with index `0` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteFirst"},infill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Replace all null values in this list with the given\n[[replacement value|replacement]]."]},ps:[[{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],nm:"infill"},add:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Add the given [[element]] to the end of this list,\nincrementing the [[length|List.size]] of the list."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove every element from this list, leaving an empty\nlist with no elements."]},nm:"clear"},replace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Replace all occurrences of the given [[value|element]]\nin this list with the given [[replacement\nvalue|replacement]].\n\nTo replace just one occurrence of the given value, use\n[[replaceFirst]] or [[replaceLast]]."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to replace"]},nm:"element"},{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],nm:"replace"},deleteLast:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove the element with index `size-1` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteLast"},replaceLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,mt:"m",an:{doc:["Replace the last occurrence of the given\n[[value|element]] in this list, if any, with the given\n[[replacement value|replacement]], returning `true` if\nthe value occurs in the list, or `false` otherwise."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to replace"]},nm:"element"},{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],nm:"replaceLast"},truncate:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{throws:["AssertionError","if `size<0`"],doc:["Truncate this list to the given [[size]] by removing\nelements from the end of the list, if necessary,\nto leave a list with at most the given size."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],nm:"truncate"},delete:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove the element at the specified [[index]],\nreturning the removed element, if any, or `null` if\nthere was no such element."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"delete"},replaceFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,mt:"m",an:{doc:["Replace the first occurrence of the given\n[[value|element]] in this list, if any, with the given\n[[replacement value|replacement]], returning `true` if\nthe value occurs in the list, or `false` otherwise."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to replace"]},nm:"element"},{$t:{nm:"Element"},mt:"prm",an:{doc:["The replacement value"]},nm:"replacement"}]],nm:"replaceFirst"},insert:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{throws:["AssertionError","if the given index is out of bounds, that\nis, if `index<0` or if `index>lastIndex+1`"],doc:["Insert the given [[element]] at the specified [[index]],\nincrementing the [[length|List.size]] of the list."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"insert"},removeFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:5,mt:"m",an:{doc:["Remove the first occurrence of the given\n[[value|element]] from this list, if any, returning\n`true` if the value occurs in the list, or `false`\notherwise."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The non-null value to remove"]},nm:"element"}]],nm:"removeFirst"},removeAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove all occurrences of every one of the given\n[[values|elements]] from this list."]},ps:[[{$t:{md:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",an:{doc:["The non-null values to remove"]},nm:"elements"}]],nm:"removeAll"}},nm:"ListMutator"},TreeSet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{see:["naturalOrderTreeSet"],doc:["A [[MutableSet]] implemented using a red\/black tree.\nElements of the set are maintained in a sorted order, from\nsmallest to largest, as determined by the given\n[[comparator function|compare]]."],by:["Gavin King"]},sts:[{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableSet"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"SortedSet"},{md:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",nm:"Element"},{mt:"tp",tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"TreeSet"}],pk:"$",nm:"Ranged"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"TreeSet"},pa:3,mt:"m",nm:"clone"},intersection:{$t:{tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"intersection"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},measure:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"TreeSet"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"measure"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"remove"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},compare$i3xpjz:{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"m",an:{doc:["A comparator function used to sort the elements."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],nm:"compare"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"},add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"clear"},complement:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"complement"},exclusiveUnion:{$t:{tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"exclusiveUnion"},spanTo:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"TreeSet"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"to"}]],nm:"spanTo"},union:{$t:{tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"union"},lowerElements:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"lowerElements"},higherElements:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"higherElements"},spanFrom:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"TreeSet"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"}]],nm:"spanFrom"},span:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"TreeSet"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"from"},{$t:{nm:"Element"},mt:"prm",nm:"to"}]],nm:"span"}},$at:{elements$py9pun:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the set."]},nm:"elements"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"last"},map$n8fv26:{$t:{tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Basic"}],pk:".",nm:"TreeMap"},pa:1024,mt:"a",nm:"map"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"}},$o:{present$b4mj24:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",nm:"present"}},ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"prm",an:{doc:["A comparator function used to sort the elements."]},$hdn:1,$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"x"},{$t:{nm:"Element"},mt:"prm",nm:"y"}]],nm:"compare"},{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set."]},$hdn:1,nm:"elements"}],nm:"TreeSet"},ArrayList:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["A [[MutableList]] implemented using a backing [[Array]].\nAlso:\n\n- a [[Stack]], where the top of the stack is the _last_\n  element of the list, and\n- a [[Queue]], where the front of the queue is the first\n  element of the list and the back of the queue is the\n  last element of the list.\n\nThe size of the backing `Array` is called the _capacity_\nof the `ArrayList`. The capacity of a new instance is\nspecified by the given [[initialCapacity]]. The capacity is\nincreased when [[size]] exceeds the capacity. The new\ncapacity is the product of the current capacity and the\ngiven [[growthFactor]]."],by:["Gavin King"]},sts:[{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableList"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Stack"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Queue"}],tp:[{nm:"Element"}],$m:{sortInPlace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",an:{doc:["Sorts the elements in this list according to the \norder induced by the given \n[[comparison function|comparing]]. Null elements are \nsorted to the end of the list. This operation modifies \nthe list."]},$m:{comparing$6r94m6:{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"m",an:{doc:["A comparison function that compares pairs of\nnon-null elements of the array."]},ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"x"},{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"y"}]],nm:"comparing"}},ps:[[{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"prm",an:{doc:["A comparison function that compares pairs of\nnon-null elements of the array."]},$pt:"f",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"x"},{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"y"}]],nm:"comparing"}]],nm:"sortInPlace"},remove:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"remove"},measure:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"measure"},accept:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"accept"},set:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"set"},deleteSpan:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"deleteSpan"},deleteMeasure:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"deleteMeasure"},pop:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",nm:"pop"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"},add:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},push:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"push"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"clear"},spanTo:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"spanTo"},delete:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"delete"},replaceFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"replaceFirst"},store$4f5qdi:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],pk:"$",nm:"Array"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"capacity"}]],nm:"store"},spanFrom:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"}]],nm:"spanFrom"},removeFirst:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"removeFirst"},removeAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"removeAll"},clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableList"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",$o:{iterator$uwzcb4:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"}],$m:{next:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Finished"},{nm:"Element"}]},pa:3,mt:"m",nm:"next"}},$at:{arrayIterator$wkszna:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],pk:"$",nm:"Iterator"},mt:"a",nm:"arrayIterator"},index$ciz003:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"index"}},nm:"iterator"}},nm:"iterator"},addAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"addAll"},grow$67gtuw:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"increment"}]],nm:"grow"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},removeLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"}]],nm:"removeLast"},prune:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"prune"},offer:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"offer"},infill:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"infill"},getFromFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"getFromFirst"},replace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"replace"},replaceLast:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{comp:"i",l:[{nm:"Element"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"element"},{$t:{nm:"Element"},mt:"prm",nm:"replacement"}]],nm:"replaceLast"},truncate:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],nm:"truncate"},insert:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"insert"},span:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"span"}},$at:{elements$thp018:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the list."]},nm:"elements"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},back:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"back"},front:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"front"},array$i32poi:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]}],pk:"$",nm:"Array"},pa:1027,mt:"a",nm:"array"},growthFactor$yahbl9:{$t:{md:"$",pk:"$",nm:"Float"},mt:"a",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},length$u7by4j:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",nm:"length"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"},lastIndex:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"g",nm:"lastIndex"},capacity:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1025,$set:{mt:"s"},mt:"g",an:{doc:["The size of the backing array, which must be at least\nas large as the [[size]] of the list."]},nm:"capacity"},initialCapacity$28ur5n:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",an:{doc:["The initial size of the backing array."]},nm:"initialCapacity"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"},top:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"top"}},ps:[{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The initial size of the backing array."]},$hdn:1,nm:"initialCapacity"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},$hdn:1,nm:"growthFactor"},{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the list."]},$hdn:1,nm:"elements"}],nm:"ArrayList"},naturalOrderTreeSet:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"TreeSet"},pa:1,mt:"m",an:{doc:["Create a [[TreeSet]] with [[comparable|Comparable]] keys,\nsorted by the natural ordering of the keys."]},tp:[{sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Comparable"}],nm:"Element"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"entries"}]],nm:"naturalOrderTreeSet"},Hashtable:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["Performance-related settings for a hashtable based \ncollection like [[HashMap]] or [[HashSet]].\n\nThe size of the backing [[Array]] is called the _capacity_\nof the hashtable.\n\n- The capacity of a new instance is specified by the given \n  [[initialCapacity]].\n- The capacity is increased, and the elements _rehashed_, \n  when the ratio of collection size to capacity exceeds the \n  given [[loadFactor]].\n- The new capacity is the product of the current capacity \n  and the given [[growthFactor]]."]},$m:{rehash:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"capacity"}]],nm:"rehash"},capacity:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"capacity"}},$at:{initialCapacity:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,mt:"a",an:{doc:["The initial capacity of the backing array."]},nm:"initialCapacity"},growthFactor:{$t:{md:"$",pk:"$",nm:"Float"},pa:1,mt:"a",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},nm:"growthFactor"},loadFactor:{$t:{md:"$",pk:"$",nm:"Float"},pa:1,mt:"a",an:{doc:["The ratio between the number of elements and the \ncapacity which triggers a rebuild of the hash set."]},nm:"loadFactor"}},ps:[{$t:{md:"$",pk:"$",nm:"Integer"},def:1,pa:1,mt:"prm",an:{doc:["The initial capacity of the backing array."]},$hdn:1,nm:"initialCapacity"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,pa:1,mt:"prm",an:{doc:["The ratio between the number of elements and the \ncapacity which triggers a rebuild of the hash set."]},$hdn:1,nm:"loadFactor"},{$t:{md:"$",pk:"$",nm:"Float"},def:1,pa:1,mt:"prm",an:{doc:["The factor used to determine the new size of the\nbacking array when a new backing array is allocated."]},$hdn:1,nm:"growthFactor"}],nm:"Hashtable"},MapMutator:{pa:1,mt:"i",an:{see:["MutableMap"],doc:["Protocol for mutation of a [[MutableMap]]."]},sts:[{md:"$",tp:[{md:"$",mt:"tp",pk:"$",nm:"Object"},{md:"$",mt:"tp",pk:"$",nm:"Anything"}],pk:"$",nm:"Map"}],tp:[{dv:"in",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{dv:"in",nm:"Item"}],$m:{clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove every entry from this map, leaving an empty map\nwith no entries."]},nm:"clear"},put:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Add an entry to this map, overwriting any existing \nentry for the given [[key]], and returning the previous \nvalue associated with the given `key`, if any, or \n`null` if no existing entry was overwritten."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],nm:"put"},remove:{$t:{md:"$",pk:"$",nm:"Anything"},pa:5,mt:"m",an:{doc:["Remove the entry associated with the given [[key]], if \nany, from this map, returning the value no longer \nassociated with the given `key`, if any, or `null` if\nthere was no entry associated with the given `key`."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"remove"},putAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,mt:"m",an:{doc:["Add the given [[entries]] to this map, overwriting any \nexisting entries with the same keys."]},ps:[[{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"entries"}]],nm:"putAll"},removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,mt:"m",an:{doc:["Remove the entry associated with the given [[key]], if \nany, only if its item is equal to the given [[item]]. \nReturn [[true]] if an entry was removed, or [[false]] \notherwise."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The item currently associated with the given [[key]]"]},nm:"item"}]],nm:"removeEntry"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,mt:"m",an:{doc:["Modify the entry associated with the given [[key]], if \nany, setting its item to the given [[newItem]], only if \nthe its item is currently equal to the given [[item]]. \nReturn [[true]] if the item was replaced,or [[false]] \notherwise."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",an:{doc:["The item currently associated with the given [[key]]"]},nm:"item"},{$t:{nm:"Item"},mt:"prm",an:{doc:["The new item to associate with the given [[key]]"]},nm:"newItem"}]],nm:"replaceEntry"},removeAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:9,mt:"m",an:{doc:["Remove the entries associated with the given [[keys]], \nif any, from this map."]},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"keys"}]],nm:"removeAll"}},nm:"MapMutator"},HashSet:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["A [[MutableSet]] implemented as a hash set stored in an \n[[Array]] of singly linked lists. Each element is assigned \nan index of the array according to its hash code. The hash \ncode of an element is defined by [[Object.hash]].\n\nThe [[stability]] of a `HashSet` controls its iteration\norder:\n\n- A [[linked]] set has a stable and meaningful order of \n  iteration. The elements of the set form a linked list, \n  where new elements are added to the end of the linked \n  list. Iteration of the set follows this linked list, from \n  least recently added elements to most recently added \n  elements.\n- An [[unlinked]] set has an unstable iteration order that \n  may change when the set is modified. The order itself is \n  not meaningful to a client.\n\nThe management of the backing array is controlled by the\ngiven [[hashtable]]."],by:["Stéphane Épardaud","Gavin King"]},sts:[{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableSet"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{addToStore$ypnrox:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"},{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"addToStore"},intersection:{$t:{tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"intersection"},clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"HashSet"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},addAll:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"}]],nm:"addAll"},createCell$73q3ts:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"},mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"elem"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},mt:"prm",nm:"rest"}]],nm:"createCell"},remove:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"remove"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"m",$m:{selecting$cex662:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"count"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},storeIndex$b5t5qz:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"elem"},{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"}]],nm:"storeIndex"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"},add:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"add"},deleteCell$8thws7:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"},mt:"prm",nm:"cell"}]],nm:"deleteCell"},complement:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"complement"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"clear"},exclusiveUnion:{$t:{tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"exclusiveUnion"},union:{$t:{tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:".",nm:"HashSet"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"union"},checkRehash$dhkh77:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",nm:"checkRehash"}},$at:{hashtable$xhg2ge:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array. "]},nm:"hashtable"},length$d3pqtk:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",an:{doc:["Number of elements in this set."]},nm:"length"},tip$9an0gb:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Tip of the traversal linked list if in `linked` mode."]},nm:"tip"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"last"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},store$coggxh:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},pa:1027,mt:"a",an:{doc:["Array of linked lists where we store the elements.\n\nEach element is stored in a linked list from this array\nat the index of the hash code of the element, modulo the\narray size."]},nm:"store"},stability$82jphv:{$t:{pk:".",nm:"Stability"},mt:"a",an:{doc:["Determines whether this is a linked hash set with a\nstable iteration order."]},nm:"stability"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"},head$aif3m6:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Head of the traversal linked list if in `linked` mode. Storage is done in\n[[store]], but traversal is done using an alternative linked list maintained\nto have a stable iteration order. Note that the cells used are the same as in\nthe [[store]], except for storage we use [[Cell.rest]] for traversal, while\nfor the stable iteration we use the [[LinkedCell.next]]\/[[LinkedCell.previous]]\nattributes of the same cell."]},nm:"head"},elements$ce2sq9:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial elements of the set."]},nm:"elements"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},ps:[{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash set with a\nstable iteration order."]},$hdn:1,nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array. "]},$hdn:1,nm:"hashtable"},{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial elements of the set."]},$hdn:1,nm:"elements"}],nm:"HashSet"},UnmodifiableList:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",an:{doc:["A wrapper class that exposes any [[List]] as unmodifiable, \nhiding the underlying `List` implementation from clients, \nand preventing attempts to narrow to [[MutableList]]."],by:["Gavin King"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"}],tp:[{dv:"out",nm:"Element"}],$m:{clone:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},measure:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"measure"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},spanTo:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"spanTo"},spanFrom:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"}]],nm:"spanFrom"},getFromFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"getFromFirst"},span:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"to"}]],nm:"span"}},$at:{lastIndex:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},pa:3,mt:"g",nm:"lastIndex"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},reversed:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"g",nm:"reversed"},rest:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:3,mt:"g",nm:"rest"},list$1bhyan:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},mt:"a",nm:"list"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:3,mt:"g",nm:"first"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},ps:[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},mt:"prm",nm:"list"}],nm:"UnmodifiableList"},HashMap:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{doc:["A [[MutableMap]] implemented as a hash map stored in an \n[[Array]] of singly linked lists of [[Entry]]s. Each entry \nis assigned an index of the array according to the hash \ncode of its key. The hash code of a key is defined by \n[[Object.hash]].\n\nThe [[stability]] of a `HashMap` controls its iteration\norder:\n\n- A [[linked]] map has a stable and meaningful order of \n  iteration. The entries of the map form a linked list, \n  where new entries are added to the end of the linked \n  list. Iteration of the map follows this linked list, from \n  least recently added elements to most recently added \n  elements.\n- An [[unlinked]] map has an unstable iteration order that \n  may change when the map is modified. The order itself is \n  not meaningful to a client.\n\nThe management of the backing array is controlled by the\ngiven [[hashtable]]."],by:["Stéphane Épardaud"]},sts:[{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"MutableMap"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],$m:{clone:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"MutableMap"},pa:3,mt:"m",nm:"clone"},iterator:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],nm:"put"},count:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"m",$m:{selecting$ucg46c:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},mt:"prm",nm:"element"}]],nm:"selecting"}},ps:[[{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",$pt:"f",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},mt:"prm",nm:"element"}]],nm:"selecting"}]],nm:"count"},addToStore$vlhtif:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"},{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},mt:"prm",nm:"entry"}]],nm:"addToStore"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"remove"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"entry"}]],nm:"contains"},createCell$a7w20a:{$t:{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"},mt:"m",ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},mt:"prm",nm:"entry"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]},mt:"prm",nm:"rest"}]],nm:"createCell"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"},{$t:{nm:"Item"},mt:"prm",nm:"newItem"}]],nm:"replaceEntry"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"clear"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"defines"},storeIndex$e9z3xh:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"},{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"prm",nm:"store"}]],nm:"storeIndex"},checkRehash$glqfdp:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",nm:"checkRehash"},putAll:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"entries"}]],nm:"putAll"},deleteCell$bxnuyp:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"},mt:"prm",nm:"cell"}]],nm:"deleteCell"},removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"}]],nm:"removeEntry"}},$at:{store$9kaiqz:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},pa:1027,mt:"a",an:{doc:["Array of linked lists where we store the elements.\n\nEach element is stored in a linked list from this array\nat the index of the hash code of the element, modulo the\narray size."]},nm:"store"},entries$ujasno:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial entries in the map."]},nm:"entries"},stability$b6pnod:{$t:{pk:".",nm:"Stability"},mt:"a",an:{doc:["Determines whether this is a linked hash map with a\nstable iteration order."]},nm:"stability"},hashtable$uda49w:{$t:{pk:".",nm:"Hashtable"},mt:"a",an:{doc:["Performance-related settings for the backing array."]},nm:"hashtable"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},head$7e95fo:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Head of the traversal linked list if in `linked` mode. Storage is done in\n[[store]], but traversal is done using an alternative linked list maintained\nto have a stable iteration order. Note that the cells used are the same as in\nthe [[store]], except for storage we use [[Cell.rest]] for traversal, while\nfor the stable iteration we use the [[LinkedCell.next]]\/[[LinkedCell.previous]]\nattributes of the same cell."]},nm:"head"},tip$66h29t:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"LinkedCell"}]},pa:1027,mt:"a",an:{doc:["Tip of the traversal linked list if in `linked` mode."]},nm:"tip"},length$g7vp02:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1027,mt:"a",an:{doc:["Number of elements in this map."]},nm:"length"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}]},pa:3,mt:"g",nm:"first"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},ps:[{$t:{pk:".",nm:"Stability"},def:1,mt:"prm",an:{doc:["Determines whether this is a linked hash map with a\nstable iteration order."]},$hdn:1,nm:"stability"},{$t:{pk:".",nm:"Hashtable"},def:1,mt:"prm",an:{doc:["Performance-related settings for the backing array."]},$hdn:1,nm:"hashtable"},{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map."]},$hdn:1,nm:"entries"}],nm:"HashMap"},smallest:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"x"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"y"}]],nm:"smallest"},TreeMap:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"c",an:{see:["naturalOrderTreeMap"],doc:["A [[MutableMap]] implemented using a red\/black tree.\nEntries in the map are maintained in a sorted order, from\nsmallest to largest key, as determined by the given\n[[comparator function|compare]]."],by:["Gavin King"]},sts:[{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"MutableMap"},{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"SortedMap"},{md:"$",tp:[{mt:"tp",nm:"Key"},{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"}],pk:"$",nm:"Ranged"}],tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],$m:{put:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{nm:"Item"},mt:"prm",nm:"item"}]],nm:"put"},compare$l83nqh:{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"m",an:{doc:["A comparator function used to sort the entries."]},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"x"},{$t:{nm:"Key"},mt:"prm",nm:"y"}]],nm:"compare"},measure:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"length"}]],nm:"measure"},remove:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"remove"},higherEntries:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:3,mt:"m",$o:{iterable$3nr49a:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",sts:[{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"}],$m:{iterator:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"}},nm:"iterable"}},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"higherEntries"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"entry"}]],nm:"contains"},replaceEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"},{$t:{nm:"Item"},mt:"prm",nm:"newItem"}]],nm:"replaceEntry"},setRightChild$y2zjj6:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"right"}]],nm:"setRightChild"},clear:{$t:{md:"$",pk:"$",nm:"Anything"},pa:3,mt:"m",nm:"clear"},setLeftChild$7ba4nt:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"left"}]],nm:"setLeftChild"},floor$u13blk:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"floor"},spanTo:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"to"}]],nm:"spanTo"},rotateLeft$bf2pku:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],nm:"rotateLeft"},assertInvariants:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",nm:"assertInvariants"},spanFrom:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"}]],nm:"spanFrom"},ceiling$by99mn:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"ceiling"},lookup$pd1hl6:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"lookup"},clone:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"},pa:3,mt:"m",nm:"clone"},rotateRight$lztmmz:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],nm:"rotateRight"},iterator:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},replaceNode$sb7ik2:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"old"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"node"}]],nm:"replaceNode"},get:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Item"}]},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"get"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},assertBlackRoot$37b14f:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",nm:"assertBlackRoot"},assertColors$bbyw4y:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},def:1,mt:"prm",nm:"node"}]],nm:"assertColors"},balanceAfterInsert$9owhr7:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"newNode"}]],nm:"balanceAfterInsert"},isRed$pt60u3:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"m",ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"node"}]],nm:"isRed"},assertBlackNodesInPaths$9l267p:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},mt:"m",ps:[[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},def:1,mt:"prm",$hdn:1,nm:"node"},{$t:{md:"$",pk:"$",nm:"Integer"},def:1,pa:1024,mt:"prm",$hdn:1,nm:"blackCount"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",pk:"$",nm:"Integer"}]},def:1,pa:1024,mt:"prm",$hdn:1,nm:"pathBlackCount"}]],nm:"assertBlackNodesInPaths"},lowerEntries:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},pa:3,mt:"m",$o:{iterable$y21z9o:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",sts:[{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"}],$m:{iterator:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"}},nm:"iterable"}},ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"}]],nm:"lowerEntries"},defines:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"key"}]],nm:"defines"},removeEntry:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"key"},{$t:{comp:"i",l:[{nm:"Item"},{md:"$",pk:"$",nm:"Object"}]},mt:"prm",nm:"item"}]],nm:"removeEntry"},span:{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"},pa:3,mt:"m",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"from"},{$t:{nm:"Key"},mt:"prm",nm:"to"}]],nm:"span"}},$c:{Node$7z3hge:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",$m:{clone:{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},pa:1,mt:"m",ps:[[{$t:{tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:".",nm:"TreeMap"},mt:"prm",nm:"clonedMap"}]],nm:"clone"}},$at:{rightmostChild:{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},pa:1,mt:"g",nm:"rightmostChild"},onRight:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"g",nm:"onRight"},parent:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1025,mt:"a",nm:"parent"},grandparent:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1,mt:"g",nm:"grandparent"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1,mt:"g",nm:"size"},red:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1025,mt:"a",nm:"red"},sibling:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1,mt:"g",nm:"sibling"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},item:{$t:{nm:"Item"},pa:1025,mt:"a",nm:"item"},onLeft:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1,mt:"g",nm:"onLeft"},left:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1025,mt:"a",nm:"left"},leftmostChild:{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},pa:1,mt:"g",nm:"leftmostChild"},right:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1025,mt:"a",nm:"right"},uncle:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1,mt:"g",nm:"uncle"},key:{$t:{nm:"Key"},pa:1025,mt:"a",nm:"key"}},ps:[{$t:{nm:"Key"},pa:1025,mt:"prm",$hdn:1,nm:"key"},{$t:{nm:"Item"},pa:1025,mt:"prm",$hdn:1,nm:"item"},{$t:{md:"$",pk:"$",nm:"Boolean"},pa:1025,mt:"prm",$hdn:1,nm:"red"}],nm:"Node$7z3hge"},ReverseNodeIterator$z6e966:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",sts:[{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"}],$m:{next:{$t:{comp:"u",l:[{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},$at:{current$suzjhm:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1027,mt:"a",nm:"current"}},ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},def:1,pa:1024,mt:"prm",$hdn:1,nm:"current"}],nm:"ReverseNodeIterator$z6e966"},NodeIterator$6tiwsc:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",sts:[{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:"$",nm:"Iterator"}],$m:{next:{$t:{comp:"u",l:[{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",pk:"$",nm:"Finished"}]},pa:3,mt:"m",nm:"next"}},$at:{current$5dq3a0:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1027,mt:"a",nm:"current"}},ps:[{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},def:1,pa:1024,mt:"prm",$hdn:1,nm:"current"}],nm:"NodeIterator$6tiwsc"}},$at:{root$w9iz1a:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},pa:1027,mt:"a",nm:"root"},last:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}]},pa:3,mt:"g",nm:"last"},hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},string:{$t:{md:"$",pk:"$",nm:"String"},pa:3,mt:"g",nm:"string"},first:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{md:"$",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}]},pa:3,mt:"g",nm:"first"},entries$25gqqk:{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"a",an:{doc:["The initial entries in the map."]},nm:"entries"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},$o:{removeCases$osfi1e:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",an:{doc:["Possible cases when removing nodes with at most one child"]},$m:{case3$l9jih4:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"s"}]],nm:"case3"},case4$l9jjj5:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"s"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sLeftRed"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sRightRed"}]],nm:"case4"},case6$l9jln7:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"s"}]],nm:"case6"},getAndEnsureAtMostOneChild$j2uuc0:{$t:{comp:"u",l:[{pk:".",nm:"TreeMap.Node$7z3hge"},{md:"$",pk:"$",nm:"Null"}]},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],nm:"getAndEnsureAtMostOneChild"},case5$l9jkl6:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"p"},{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"s"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sLeftRed"},{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"prm",nm:"sRightRed"}]],nm:"case5"},case2$l9jhf3:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"sibling"}]],nm:"case2"},case1$l9jgd2:{$t:{md:"$",pk:"$",nm:"Anything"},mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{pk:".",nm:"TreeMap.Node$7z3hge"}]},mt:"prm",nm:"sibling"}]],nm:"case1"},removeNodeWithAtMostOneChild:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",ps:[[{$t:{pk:".",nm:"TreeMap.Node$7z3hge"},mt:"prm",nm:"node"}]],nm:"removeNodeWithAtMostOneChild"}},nm:"removeCases"}},ps:[{$t:{md:"$",pk:"$",nm:"Comparison"},mt:"prm",an:{doc:["A comparator function used to sort the entries."]},$hdn:1,$pt:"f",ps:[[{$t:{nm:"Key"},mt:"prm",nm:"x"},{$t:{nm:"Key"},mt:"prm",nm:"y"}]],nm:"compare"},{$t:{md:"$",tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},def:1,mt:"prm",an:{doc:["The initial entries in the map."]},$hdn:1,nm:"entries"}],nm:"TreeMap"},Stability:{super:{md:"$",pk:"$",nm:"Basic"},of:[{pk:".",nm:"unlinked"},{pk:".",nm:"linked"}],pa:257,mt:"c",nm:"Stability"},unlinked:{super:{pk:".",nm:"Stability"},pa:1,mt:"o",nm:"unlinked"},MutableList:{pa:1,mt:"i",an:{see:["LinkedList","ArrayList"],doc:["A [[List]] supporting addition, insertion, removal, and\nreplacement of its elements."],by:["Stéphane Épardaud"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"ListMutator"}],tp:[{nm:"Element"}],$m:{clone:{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"MutableList"},pa:7,mt:"m",an:{doc:["A new list with the same elements as this list."]},nm:"clone"},deleteLast:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:11,mt:"m",an:{doc:["Remove the element with index `size-1` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteLast"},delete:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:7,mt:"m",an:{doc:["Remove the element at the specified [[index]],\nreturning the removed element, if any, or `null` if\nthere was no such element."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"index"}]],nm:"delete"},deleteFirst:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{nm:"Element"}]},pa:11,mt:"m",an:{doc:["Remove the element with index `0` from this list,\nreturning the removed element, or `null` if there was\nno such element."]},nm:"deleteFirst"}},nm:"MutableList"},entryStore:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Key"},{mt:"tp",nm:"Item"}],pk:"$",nm:"Entry"}],pk:".",nm:"Cell"}]}],pk:"$",nm:"Array"},mt:"m",an:{doc:["Create a backing array for storing linked lists of hash map\nentries"]},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Key"},{nm:"Item"}],ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"size"}]],nm:"entryStore"},unmodifiableSet:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},pa:1,mt:"m",an:{doc:["Wrap the given [[Set]], preventing attempts to narrow the\nreturned `Set` to [[MutableSet]]."]},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"unmodifiableSet"},unmodifiableList:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},pa:1,mt:"m",an:{doc:["Wrap the given [[List]], preventing attempts to narrow the\nreturned `List` to [[MutableList]]."]},tp:[{nm:"Element"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"List"},mt:"prm",nm:"list"}]],nm:"unmodifiableList"},UnmodifiableSet:{super:{md:"$",pk:"$",nm:"Basic"},mt:"c",an:{doc:["A wrapper class that exposes any [[Set]] as unmodifiable, \nhiding the underlying `Set` implementation from clients, \nand preventing attempts to narrow to [[MutableSet]]."],by:["Gavin King"]},sts:[{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"}],tp:[{dv:"out",sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Element"}],$m:{subset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{md:"$",mt:"tp",pk:"$",nm:"Object"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"subset"},complement:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"complement"},clone:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},pa:3,mt:"m",nm:"clone"},intersection:{$t:{md:"$",tp:[{comp:"i",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"intersection"},iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},exclusiveUnion:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"exclusiveUnion"},superset:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",tp:[{md:"$",mt:"tp",pk:"$",nm:"Object"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"superset"},equals:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"that"}]],nm:"equals"},union:{$t:{md:"$",tp:[{comp:"u",mt:"tp",l:[{nm:"Element"},{nm:"Other"}]}],pk:"$",nm:"Set"},pa:3,mt:"m",tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Other"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Other"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}]],nm:"union"},contains:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:3,mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Object"},mt:"prm",nm:"element"}]],nm:"contains"}},$at:{hash:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"hash"},set$4htprx:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},mt:"a",nm:"set"},size:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"g",nm:"size"}},ps:[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Set"},mt:"prm",nm:"set"}],nm:"UnmodifiableSet"},group:{$t:{md:"$",tp:[{mt:"tp",nm:"Group"},{md:"$",mt:"tp",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequence"}],pk:"$",nm:"Map"},pa:1,mt:"m",an:{doc:["Produces a [[Map]] grouping the given [[elements]] into \nsequences under the group keys provided by the given \n[[grouping function|grouping]]."]},tp:[{sts:[{md:"$",pk:"$",nm:"Object"}],nm:"Group"},{nm:"Element"}],$m:{grouping$h95l9c:{$t:{nm:"Group"},mt:"m",an:{doc:["A function that returns the group key under which to \ngroup the specified element."]},ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"grouping"},mapping$dp6ds0:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Sequence"},mt:"m",ps:[[{$t:{nm:"Group"},mt:"prm",nm:"group"},{$t:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"ArrayList"},mt:"prm",nm:"list"}]],nm:"mapping"}},ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"},{$t:{nm:"Group"},mt:"prm",an:{doc:["A function that returns the group key under which to \ngroup the specified element."]},$hdn:1,$pt:"f",ps:[[{$t:{nm:"Element"},mt:"prm",nm:"element"}]],nm:"grouping"}]],nm:"group"},LinkedCell:{super:{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"},mt:"c",an:{doc:["Cell with two traversal modes:\n\n-[[rest]] for storage\n-[[next]]\/[[previous]] for stable iteration\n\nThis allows us to use the same cell object in two different lists which\nhave the same elements but different iteration order."]},tp:[{nm:"Element"}],$at:{car$c10yed:{$t:{nm:"Element"},mt:"a",nm:"car"},previous:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"LinkedCell"}]},pa:1025,mt:"a",nm:"previous"},next:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"LinkedCell"}]},pa:1025,mt:"a",nm:"next"},cdr$c13omy:{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},mt:"a",nm:"cdr"}},ps:[{$t:{nm:"Element"},mt:"prm",nm:"car"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"Cell"}]},mt:"prm",nm:"cdr"},{$t:{comp:"u",l:[{md:"$",pk:"$",nm:"Null"},{tp:[{mt:"tp",nm:"Element"}],pk:".",nm:"LinkedCell"}]},pa:1025,mt:"prm",$hdn:1,nm:"previous"}],nm:"LinkedCell"}}};
});
}(typeof define==='function' && define.amd ? define : function (factory) {
if (typeof exports!=='undefined') { factory(require, exports, module);
} else { throw 'no module loader'; }
}));
